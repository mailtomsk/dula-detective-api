generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                     Int       @id @default(autoincrement())
  name                   String
  email                  String    @unique
  password               String
  emailVerified          Boolean   @default(false)
  plan                   String    @default("free")
  profile_image          String?
  notifications          Boolean   @default(true)
  dark_mode              Boolean   @default(false)
  default_analysis_type  String    @default("human")
  is_active              Boolean   @default(true)
  last_Login             DateTime?
  created_at             DateTime  @default(now())
  updated_at             DateTime? @updatedAt

  passwordResetToken PasswordResetToken?
  scanAnalyses   ScanAnalysis[]
  Notifications  Notification[]

}

model PasswordResetToken {
  id            Int        @id @default(autoincrement())
  user          User       @relation(fields: [user_id], references: [id], onDelete: Cascade)
  user_id       Int        @unique
  token         String
  expires_at    DateTime
  created_at    DateTime   @default(now())
  updated_at    DateTime?  @updatedAt
}

model ScanHistory {
  id               Int       @id @default(autoincrement())
  user_id          Int?      // nullable if anonymous
  image_path       String?
  barcode          String?
  analysis_type    String    // 'human' | 'pet'
  created_at       DateTime  @default(now())
  updated_at       DateTime?  @updatedAt
}

model ScanAnalysis {
  id               Int         @id @default(autoincrement())
  analysis_id      String?     @unique
  user_id          Int?
  barcode          String?
  user             User?       @relation(fields: [user_id], references: [id], onDelete: SetNull)
  analysis_type    String
  product_name     String
  overall_status   String
  confidence       Float
  processing_time  Float
  ingredients      Json       // array of ingredients (as JSON)
  summary          Json       // object with safeCount, cautionCount, etc.
  recommendations  String[]   // array of strings
  allergens        String[]   // array of allergens
  image_url        String?
  created_at       DateTime   @default(now())
  updated_at       DateTime?  @updatedAt
}

model InsightArticle {
  id            Int         @id @default(autoincrement())
  article_id    String      @unique
  title         String
  description   String?
  content       String?
  category      String   // "safety" | "education" | "pet-safety" | "tips"
  read_time     Int
  image_path    String?
  published_at  DateTime
  created_at    DateTime   @default(now())
  updated_at    DateTime?  @updatedAt
  trending      Boolean    @default(false)
  author_name   String?
  author_bio    String?
  tags          String[] // optional tags
}

model Notification {
  id         Int       @id @default(autoincrement())
  user_id    Int?
  user       User?     @relation(fields: [user_id], references: [id], onDelete: SetNull)
  type       String
  title      String
  message    String
  data       Json?
  read       Boolean   @default(false)
  created_at DateTime  @default(now())
  updated_at DateTime? @updatedAt
}

model Admin {
  id              Int       @id @default(autoincrement())
  username        String
  email           String    @unique
  password        String
  remember_token  String?
  created_at      DateTime  @default(now())
  updated_at      DateTime? @updatedAt
}

model Setting {
  id              Int      @id @default(autoincrement())
  appName         String
  description     String // rename
  contactEmail    String
  contactPhone    String
  logoUrl         String?
  timezone        String   @default("UTC")
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}

model NotificationSetting {
  id                   Int      @id @default(autoincrement())
  emailNotifications   Boolean @default(true)
  adminNotifications   Boolean @default(true)
  alertThreshold       Int      @default(10)
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt
}

model SystemSetting {
  id                   Int       @id @default(autoincrement())
  apiRateLimit         Int       @default(1000)
  dataRetentionDays    Int       @default(90)
  backupFrequency      String    @default("Daily")
  createdAt            DateTime  @default(now())
  updatedAt            DateTime  @updatedAt
}


model BarcodeDetails {
  id                   Int       @id @default(autoincrement())
  barcode              String    @unique
  productName          String?
  brand                String?
  image_url            String?
  ingredients          String?   @db.Text
  nutrition            String?   @db.Text
  aiResponse           Json?
  createdAt            DateTime  @default(now())
  updatedAt            DateTime  @updatedAt
}

